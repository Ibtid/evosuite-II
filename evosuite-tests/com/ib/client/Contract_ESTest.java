/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:29:28 GMT 2023
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.UnderComp;
import java.util.List;
import java.util.Spliterator;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Contract_ESTest extends Contract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Contract> vector0 = new Vector<Contract>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract0 = new Contract((-3133), "O};g^", "O};g^", ":4", (-3417.47298), ":4", ":4", ":4", "m*rFTR3!_m%5Cwosk^,", ":4", vector0, "m*rFTR3!_m%5Cwosk^,", true, "o[nJe{^C*$-ZQxvxxAc", "m*rFTR3!_m%5Cwosk^,");
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertFalse(vector0.contains(contract0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3417.47298), contract1.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-3133), contract1.m_conId);
      assertNotNull(contract1);
      assertFalse(vector0.contains(contract0));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract2.m_includeExpired);
      assertEquals((-3417.47298), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertNotNull(contract2);
      assertFalse(vector0.contains(contract0));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      contract0.m_underComp = underComp0;
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3417.47298), contract1.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-3133), contract1.m_conId);
      assertFalse(boolean0);
      assertFalse(vector0.contains(contract0));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      underComp0.m_price = 1654.49695508;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vector<Object> vector1 = new Vector<Object>();
      assertNotNull(vector1);
      assertFalse(vector1.contains((-3133)));
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      
      Vector<Integer> vector2 = new Vector<Integer>();
      assertNotNull(vector2);
      assertFalse(vector2.contains((-3133)));
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      
      boolean boolean1 = vector1.add((Object) vector2);
      assertTrue(boolean1);
      assertFalse(vector1.contains((-3133)));
      assertFalse(vector2.contains((-3133)));
      assertFalse(boolean1 == boolean0);
      assertEquals(10, vector1.capacity());
      assertEquals("[[]]", vector1.toString());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.size());
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133), contract3.m_conId);
      assertEquals((-3417.47298), contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertFalse(vector0.contains(contract0));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean2 = contract2.equals(contract1);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3417.47298), contract1.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-3133), contract1.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertEquals((-3417.47298), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertTrue(boolean2);
      assertFalse(vector0.contains(contract0));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract3);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract4 = (Contract)contract3.clone();
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133), contract3.m_conId);
      assertEquals((-3417.47298), contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertTrue(contract4.m_includeExpired);
      assertEquals((-3417.47298), contract4.m_strike, 0.01);
      assertEquals((-3133), contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(vector0.contains(contract4));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract0));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean3 = contract2.equals(contract4);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract2.m_includeExpired);
      assertEquals((-3417.47298), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertEquals((-3133), contract3.m_conId);
      assertEquals((-3417.47298), contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertTrue(contract4.m_includeExpired);
      assertEquals((-3417.47298), contract4.m_strike, 0.01);
      assertEquals((-3133), contract4.m_conId);
      assertFalse(boolean3);
      assertFalse(vector0.contains(contract4));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract4));
      assertFalse(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract4));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals((-3133), contract5.m_conId);
      assertEquals((-3417.47298), contract5.m_strike, 0.01);
      assertTrue(contract5.m_includeExpired);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract5);
      assertFalse(vector0.contains(contract4));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertNotNull(underComp0);
      
      contract1.m_underComp = underComp0;
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Contract> vector0 = new Vector<Contract>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract0 = new Contract((-3133), "O};g^", "O};g^", ":4", (-3417.47298), ":4", ":4", ":4", "m*rFTR3!_m%5Cwosk^,", ":4", vector0, "m*rFTR3!_m%5Cwosk^,", true, "o[nJe{^C*$-ZQxvxxAc", "m*rFTR3!_m%5Cwosk^,");
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertFalse(vector0.contains(contract0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133), contract1.m_conId);
      assertEquals((-3417.47298), contract1.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(vector0.contains(contract0));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract2.m_includeExpired);
      assertEquals((-3417.47298), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertNotNull(contract2);
      assertFalse(vector0.contains(contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      contract0.m_underComp = underComp0;
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133), contract1.m_conId);
      assertEquals((-3417.47298), contract1.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(vector0.contains(contract2));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      underComp0.m_price = 1654.49695508;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = contract0.equals(object0);
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean1);
      assertFalse(vector0.contains(contract2));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3417.47298), contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertEquals((-3133), contract3.m_conId);
      assertNotNull(contract3);
      assertFalse(vector0.contains(contract2));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Vector<String> vector1 = new Vector<String>();
      assertNotNull(vector1);
      assertFalse(vector1.contains("o[nJe{^C*$-ZQxvxxAc"));
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      
      boolean boolean2 = contract0.equals(vector1);
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(vector0.contains(contract2));
      assertFalse(vector1.contains("o[nJe{^C*$-ZQxvxxAc"));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      
      boolean boolean3 = contract0.equals(vector1);
      assertEquals((-3133), contract0.m_conId);
      assertEquals((-3417.47298), contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean3);
      assertFalse(vector0.contains(contract2));
      assertFalse(vector1.contains("o[nJe{^C*$-ZQxvxxAc"));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      contract0.m_underComp = underComp0;
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(1, (-2124));
      assertNotNull(vector0);
      assertFalse(vector0.contains(1));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Contract contract0 = new Contract(566, "{.5thj}WCHeB", "I:4", "I:4", 1.7976931348623157E308, "PJ~L}", "I:4", "PJ~L}", "5D>1Y8Z<-o", "5D>1Y8Z<-o", vector0, "i=/K2&gnIQ.KJM", false, "i=/K2&gnIQ.KJM", "<#Nd");
      assertFalse(contract0.m_includeExpired);
      assertEquals(566, contract0.m_conId);
      assertEquals(1.7976931348623157E308, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      assertFalse(vector0.contains(false));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Contract contract1 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(566, contract0.m_conId);
      assertEquals(1.7976931348623157E308, contract0.m_strike, 0.01);
      assertEquals(1.7976931348623157E308, contract1.m_strike, 0.01);
      assertEquals(566, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(vector0.contains(false));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
      assertEquals(566, contract0.m_conId);
      assertEquals(1.7976931348623157E308, contract0.m_strike, 0.01);
      assertEquals(1.7976931348623157E308, contract1.m_strike, 0.01);
      assertEquals(566, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertTrue(boolean0);
      assertFalse(vector0.contains(false));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      contract0.m_primaryExch = "5D>1Y8Z<-o";
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertFalse(vector0.contains(566));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Contract contract2 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(566, contract0.m_conId);
      assertEquals(1.7976931348623157E308, contract0.m_strike, 0.01);
      assertEquals(566, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(1.7976931348623157E308, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertFalse(vector0.contains(566));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean1 = contract1.equals(contract2);
      assertFalse(contract0.m_includeExpired);
      assertEquals(566, contract0.m_conId);
      assertEquals(1.7976931348623157E308, contract0.m_strike, 0.01);
      assertEquals(1.7976931348623157E308, contract1.m_strike, 0.01);
      assertEquals(566, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(566, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(1.7976931348623157E308, contract2.m_strike, 0.01);
      assertFalse(boolean1);
      assertFalse(vector0.contains(566));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(1, (-2124));
      assertNotNull(vector0);
      assertFalse(vector0.contains((-2124)));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      
      Contract contract0 = new Contract((-2124), "BOND", "BOND", "{.5thj}WCHeB", 1, "{.5thj}WCHeB", "i=/K2OgnIQ.KJM", "i=/K2OgnIQ.KJM", "i=/K2OgnIQ.KJM", "?[k%Fk'6h[/8", vector0, "`:", false, "F>j>ZAJ6", "`:");
      assertEquals(1.0, contract0.m_strike, 0.01);
      assertEquals((-2124), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertFalse(vector0.contains(1));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      
      boolean boolean0 = vector0.add((Object) "?[k%Fk'6h[/8");
      assertTrue(boolean0);
      assertTrue(vector0.contains("?[k%Fk'6h[/8"));
      assertFalse(vector0.contains("{.5thj}WCHeB"));
      assertFalse(vector0.isEmpty());
      assertEquals("[?[k%Fk'6h[/8]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(1.0, contract0.m_strike, 0.01);
      assertEquals((-2124), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-2124), contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(1.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(vector0.contains("?[k%Fk'6h[/8"));
      assertFalse(vector0.contains("{.5thj}WCHeB"));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertFalse(vector0.isEmpty());
      assertEquals("[?[k%Fk'6h[/8]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(1.0, contract0.m_strike, 0.01);
      assertEquals((-2124), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract2.m_includeExpired);
      assertEquals(1.0, contract2.m_strike, 0.01);
      assertEquals((-2124), contract2.m_conId);
      assertNotNull(contract2);
      assertTrue(vector0.contains("?[k%Fk'6h[/8"));
      assertFalse(vector0.contains("{.5thj}WCHeB"));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertFalse(vector0.isEmpty());
      assertEquals("[?[k%Fk'6h[/8]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      boolean boolean1 = contract0.equals(contract2);
      assertEquals(1.0, contract0.m_strike, 0.01);
      assertEquals((-2124), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract2.m_includeExpired);
      assertEquals(1.0, contract2.m_strike, 0.01);
      assertEquals((-2124), contract2.m_conId);
      assertTrue(boolean1);
      assertTrue(vector0.contains("?[k%Fk'6h[/8"));
      assertFalse(vector0.contains("{.5thj}WCHeB"));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertFalse(vector0.isEmpty());
      assertEquals("[?[k%Fk'6h[/8]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract1.m_includeExpired = false;
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Contract contract3 = new Contract(174, (String) null, "BOND", (String) null, 1603.341, "BOND", (String) null, "[X$<u{7CuR_EPK.", "JsXTaX]B[yO^1@Y?%F ", "BOND", vector0, (String) null, false, (String) null, "/o xy`sic~R$*'S9:K");
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      contract3.m_strike = 1603.341;
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = contract1.equals(contract3);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(vector0.contains(174));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract0);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Contract contract4 = (Contract)contract3.clone();
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertFalse(contract4.m_includeExpired);
      assertEquals(1603.341, contract4.m_strike, 0.01);
      assertEquals(174, contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      contract4.m_primaryExch = "";
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = contract0.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      
      Contract contract5 = (Contract)contract3.clone();
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(174, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(1603.341, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract4));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract4);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean2 = contract0.equals("JsXTaX]B[yO^1@Y?%F ");
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(contract0.equals((Object)contract5));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      
      Contract contract6 = (Contract)contract4.clone();
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertFalse(contract4.m_includeExpired);
      assertEquals(1603.341, contract4.m_strike, 0.01);
      assertEquals(174, contract4.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(174, contract6.m_conId);
      assertEquals(1603.341, contract6.m_strike, 0.01);
      assertNotNull(contract6);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract5));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract4));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract1));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract5));
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract6);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean3 = contract4.equals(contract6);
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertEquals(174, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertFalse(contract4.m_includeExpired);
      assertEquals(1603.341, contract4.m_strike, 0.01);
      assertEquals(174, contract4.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(174, contract6.m_conId);
      assertEquals(1603.341, contract6.m_strike, 0.01);
      assertTrue(boolean3);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract5));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract6));
      assertTrue(contract3.equals((Object)contract4));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract6));
      assertTrue(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract1));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract5));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract6);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      Contract contract2 = (Contract)contract1.clone();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      boolean boolean0 = contract1.equals(contract2);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertTrue(boolean0);
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = new Contract();
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract1));
      
      Contract contract4 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract5 = new Contract(0, "", (String) null, "$(3dS(0^.", 1.0, "BHXAi>9#MF", "", "", "BHXAi>9#MF", (String) null, vector0, (String) null, true, "6I(X2 WOq @Si", (String) null);
      assertEquals(0, contract5.m_conId);
      assertTrue(contract5.m_includeExpired);
      assertEquals(1.0, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertFalse(vector0.contains(""));
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract2));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = contract1.equals(contract5);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertTrue(contract5.m_includeExpired);
      assertEquals(1.0, contract5.m_strike, 0.01);
      assertFalse(boolean1);
      assertFalse(vector0.contains(""));
      assertFalse(contract1.equals((Object)contract5));
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract4));
      assertTrue(contract1.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract4);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract2);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Contract contract6 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertNotNull(contract6);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract1));
      assertTrue(contract6.equals((Object)contract3));
      assertTrue(contract6.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract2);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      contract0.m_comboLegsDescrip = "GkKa&qih~D5dcN";
      contract0.m_strike = 1603.341;
      boolean boolean0 = contract0.equals("GkKa&qih~D5dcN");
      assertEquals(0, contract0.m_conId);
      assertEquals(1603.341, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean0);
      
      contract0.m_comboLegsDescrip = "GkKa&qih~D5dcN";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(1603.341, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(1603.341, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(1603.341, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(1603.341, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Contract contract3 = new Contract();
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertNotNull(contract3);
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Contract contract4 = new Contract();
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      
      contract4.m_underComp = null;
      contract4.m_comboLegsDescrip = "GkKa&qih~D5dcN";
      boolean boolean1 = contract1.equals(contract4);
      assertEquals(0, contract0.m_conId);
      assertEquals(1603.341, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(1603.341, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertFalse(boolean1);
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_currency = "$y1%LC8";
      Contract contract1 = new Contract();
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_expiry = "8 ?EOCX%U&oCt";
      Contract contract2 = new Contract();
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      
      contract0.m_conId = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = contract1.equals(contract0);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_expiry = "8 ?EOCX%U&oCt";
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      contract0.m_conId = 0;
      contract0.m_includeExpired = true;
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertNotNull(contract3);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      
      boolean boolean0 = contract0.equals(contract3);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertTrue(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      
      boolean boolean1 = contract2.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertTrue(boolean1);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Contract contract4 = (Contract)contract1.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract4);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      
      boolean boolean2 = contract0.equals(contract4);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract5.m_conId);
      assertTrue(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract3));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract0);
      
      Integer integer0 = new Integer(627);
      assertNotNull(integer0);
      assertEquals(627, (int)integer0);
      
      boolean boolean3 = contract1.equals(integer0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean3);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract5));
      assertTrue(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      
      Contract contract6 = new Contract();
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertNotNull(contract6);
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract2));
      
      Contract contract7 = (Contract)contract6.clone();
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract7.m_includeExpired);
      assertEquals(0, contract7.m_conId);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertNotNull(contract7);
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract7.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract0));
      assertFalse(contract7.equals((Object)contract2));
      assertTrue(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract5));
      assertTrue(contract7.equals((Object)contract1));
      assertTrue(contract7.equals((Object)contract6));
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract2);
      assertNotSame(contract7, contract4);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract5);
      
      Contract contract8 = (Contract)contract2.clone();
      assertEquals(0.0, contract8.m_strike, 0.01);
      assertFalse(contract8.m_includeExpired);
      assertEquals(0, contract8.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract8);
      assertTrue(contract8.equals((Object)contract3));
      assertTrue(contract8.equals((Object)contract5));
      assertFalse(contract8.equals((Object)contract1));
      assertFalse(contract8.equals((Object)contract6));
      assertFalse(contract8.equals((Object)contract7));
      assertTrue(contract8.equals((Object)contract2));
      assertFalse(contract8.equals((Object)contract4));
      assertTrue(contract8.equals((Object)contract0));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract7));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract2.equals((Object)contract5));
      assertFalse(contract2.equals((Object)contract6));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract7));
      assertFalse(contract2.equals((Object)contract4));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract8, contract2);
      assertNotSame(contract8, contract1);
      assertNotSame(contract8, contract6);
      assertNotSame(contract8, contract5);
      assertNotSame(contract8, contract7);
      assertNotSame(contract8, contract4);
      assertNotSame(contract8, contract3);
      assertNotSame(contract8, contract0);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract4);
      assertNotSame(contract2, contract6);
      assertNotSame(contract2, contract7);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract8);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract5);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      boolean boolean4 = contract0.equals(contract6);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertFalse(boolean4);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract8));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract7));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(contract6.equals((Object)contract7));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract8));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract2));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract4);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract8);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract2);
      
      Contract contract9 = (Contract)contract6.clone();
      assertEquals(0.0, contract9.m_strike, 0.01);
      assertEquals(0, contract9.m_conId);
      assertFalse(contract9.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertNotNull(contract9);
      assertTrue(contract9.equals((Object)contract7));
      assertFalse(contract9.equals((Object)contract0));
      assertFalse(contract9.equals((Object)contract2));
      assertTrue(contract9.equals((Object)contract4));
      assertFalse(contract9.equals((Object)contract8));
      assertTrue(contract9.equals((Object)contract1));
      assertTrue(contract9.equals((Object)contract6));
      assertFalse(contract9.equals((Object)contract5));
      assertFalse(contract9.equals((Object)contract3));
      assertTrue(contract6.equals((Object)contract7));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract8));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract2));
      assertNotSame(contract9, contract1);
      assertNotSame(contract9, contract6);
      assertNotSame(contract9, contract0);
      assertNotSame(contract9, contract2);
      assertNotSame(contract9, contract4);
      assertNotSame(contract9, contract8);
      assertNotSame(contract9, contract7);
      assertNotSame(contract9, contract5);
      assertNotSame(contract9, contract3);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract9);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract8);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract2);
      
      Contract contract10 = (Contract)contract6.clone();
      assertEquals(0.0, contract10.m_strike, 0.01);
      assertFalse(contract10.m_includeExpired);
      assertEquals(0, contract10.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertNotNull(contract10);
      assertTrue(contract10.equals((Object)contract9));
      assertTrue(contract10.equals((Object)contract7));
      assertFalse(contract10.equals((Object)contract0));
      assertFalse(contract10.equals((Object)contract2));
      assertFalse(contract10.equals((Object)contract3));
      assertFalse(contract10.equals((Object)contract5));
      assertTrue(contract10.equals((Object)contract6));
      assertTrue(contract10.equals((Object)contract1));
      assertFalse(contract10.equals((Object)contract8));
      assertTrue(contract10.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract7));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract9));
      assertTrue(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract8));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract2));
      assertNotSame(contract10, contract1);
      assertNotSame(contract10, contract0);
      assertNotSame(contract10, contract2);
      assertNotSame(contract10, contract3);
      assertNotSame(contract10, contract4);
      assertNotSame(contract10, contract6);
      assertNotSame(contract10, contract9);
      assertNotSame(contract10, contract5);
      assertNotSame(contract10, contract7);
      assertNotSame(contract10, contract8);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract10);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract9);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract8);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean5 = contract1.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean5);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract8));
      assertFalse(contract0.equals((Object)contract10));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract9));
      assertFalse(contract0.equals((Object)contract7));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract1.equals((Object)contract6));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract5));
      assertTrue(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract7));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract10));
      assertFalse(contract1.equals((Object)contract8));
      assertTrue(contract1.equals((Object)contract9));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract10);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract9);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract4);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract9);
      assertNotSame(contract1, contract10);
      assertNotSame(contract1, contract6);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract7);
      assertNotSame(contract1, contract8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_expiry = "qn1|bVvEBpizE";
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      boolean boolean0 = contract1.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_symbol = "H0H*#A$J{=P.GN/xP";
      contract0.m_strike = (-1562.530190536);
      contract0.m_includeExpired = true;
      boolean boolean0 = contract0.equals("4kmT");
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-1562.530190536), contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add((Integer) 0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(0));
      assertFalse(boolean1 == boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      boolean boolean2 = contract0.equals("H0H*#A$J{=P.GN/xP");
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(contract0, contract1);
      
      Contract contract2 = (Contract)contract0.clone();
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean3 = contract0.equals(integer0);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      
      Vector<Object> vector1 = new Vector<Object>();
      assertNotNull(vector1);
      assertFalse(vector1.contains((-1562.530190536)));
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      
      contract0.m_secId = "H0H*#A$J{=P.GN/xP";
      boolean boolean4 = contract0.equals(vector1);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean4);
      assertFalse(vector1.contains((-1562.530190536)));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      
      Contract contract3 = (Contract)contract0.clone();
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals((-1562.530190536), contract3.m_strike, 0.01);
      assertNotNull(contract3);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      
      Contract contract4 = (Contract)contract0.clone();
      assertEquals((-1562.530190536), contract4.m_strike, 0.01);
      assertTrue(contract4.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract4);
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      
      Vector<Object> vector2 = new Vector<Object>();
      assertNotNull(vector2);
      assertFalse(vector2.contains((-1562.530190536)));
      assertTrue(vector2.equals((Object)vector1));
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      
      boolean boolean5 = contract0.equals(contract1);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-1562.530190536), contract1.m_strike, 0.01);
      assertFalse(boolean5);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract0);
      
      Contract contract5 = (Contract)contract0.clone();
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract5.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertEquals((-1562.530190536), contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract1));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract1);
      
      boolean boolean6 = contract0.equals(contract2);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertFalse(boolean6);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(contract2.equals((Object)contract5));
      assertFalse(contract2.equals((Object)contract4));
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract3));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract5);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_secId = "OxVf\"";
      boolean boolean0 = contract1.equals(contract0);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertTrue(boolean0);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Contract contract2 = new Contract(0, (String) null, (String) null, "oqFO.bygV", 0.0, (String) null, "com.ib.client.Contract", "p^$}q", (String) null, "+&{tja", contract0.m_comboLegs, "vEf'v&!M}[;", false, "com.ib.client.Contract", "6nS*TK:]:'/wA<e");
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      
      boolean boolean1 = contract0.equals(contract2);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      boolean boolean0 = contract0.equals(contract0);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_multiplier = "";
      contract0.m_right = "<@Nr>RyhJ3";
      contract0.m_secId = "";
      contract0.m_secIdType = "";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = contract0.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean0);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      
      Contract contract3 = (Contract)contract1.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      Contract contract4 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      
      Integer integer0 = new Integer((-1351));
      assertNotNull(integer0);
      assertEquals((-1351), (int)integer0);
      
      Contract contract5 = (Contract)contract4.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract4));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract1);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("<@Nr>RyhJ3"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Contract contract6 = new Contract();
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertNotNull(contract6);
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract5));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      
      Contract contract7 = (Contract)contract6.clone();
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertEquals(0, contract7.m_conId);
      assertFalse(contract7.m_includeExpired);
      assertNotNull(contract7);
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract5));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertTrue(contract7.equals((Object)contract6));
      assertFalse(contract7.equals((Object)contract5));
      assertFalse(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract1));
      assertFalse(contract7.equals((Object)contract0));
      assertFalse(contract7.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract2));
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract4);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract2);
      
      boolean boolean1 = contract3.equals(contract7);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertEquals(0, contract7.m_conId);
      assertFalse(contract7.m_includeExpired);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(contract0.equals((Object)contract7));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract6));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract4));
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract6));
      assertTrue(contract1.equals((Object)contract5));
      assertFalse(contract1.equals((Object)contract7));
      assertFalse(contract3.equals((Object)contract6));
      assertTrue(contract3.equals((Object)contract5));
      assertFalse(contract3.equals((Object)contract7));
      assertTrue(contract3.equals((Object)contract4));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract7));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertTrue(contract7.equals((Object)contract6));
      assertFalse(contract7.equals((Object)contract5));
      assertFalse(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract1));
      assertFalse(contract7.equals((Object)contract0));
      assertFalse(contract7.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract2));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract6);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract6);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract7);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract6);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract7);
      assertNotSame(contract3, contract5);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract4);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract2);
      
      Contract contract8 = new Contract();
      assertEquals(0, contract8.m_conId);
      assertFalse(contract8.m_includeExpired);
      assertEquals(0.0, contract8.m_strike, 0.01);
      assertNotNull(contract8);
      assertFalse(contract8.equals((Object)contract2));
      assertFalse(contract8.equals((Object)contract3));
      assertTrue(contract8.equals((Object)contract7));
      assertTrue(contract8.equals((Object)contract6));
      assertFalse(contract8.equals((Object)contract5));
      assertFalse(contract8.equals((Object)contract4));
      assertFalse(contract8.equals((Object)contract1));
      assertFalse(contract8.equals((Object)contract0));
      
      Contract contract9 = (Contract)contract3.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract9.m_strike, 0.01);
      assertFalse(contract9.m_includeExpired);
      assertEquals(0, contract9.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract9);
      assertFalse(contract0.equals((Object)contract7));
      assertTrue(contract0.equals((Object)contract5));
      assertFalse(contract0.equals((Object)contract8));
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract6));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract9.equals((Object)contract0));
      assertTrue(contract9.equals((Object)contract3));
      assertTrue(contract9.equals((Object)contract2));
      assertTrue(contract9.equals((Object)contract1));
      assertFalse(contract9.equals((Object)contract7));
      assertTrue(contract9.equals((Object)contract5));
      assertFalse(contract9.equals((Object)contract8));
      assertFalse(contract9.equals((Object)contract6));
      assertTrue(contract9.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract8));
      assertTrue(contract1.equals((Object)contract4));
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract6));
      assertTrue(contract1.equals((Object)contract5));
      assertFalse(contract1.equals((Object)contract7));
      assertFalse(contract3.equals((Object)contract6));
      assertTrue(contract3.equals((Object)contract5));
      assertFalse(contract3.equals((Object)contract7));
      assertFalse(contract3.equals((Object)contract8));
      assertTrue(contract3.equals((Object)contract4));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract9);
      assertNotSame(contract0, contract6);
      assertNotSame(contract9, contract5);
      assertNotSame(contract9, contract4);
      assertNotSame(contract9, contract0);
      assertNotSame(contract9, contract3);
      assertNotSame(contract9, contract7);
      assertNotSame(contract9, contract2);
      assertNotSame(contract9, contract8);
      assertNotSame(contract9, contract6);
      assertNotSame(contract9, contract1);
      assertNotSame(contract1, contract8);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract9);
      assertNotSame(contract1, contract6);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract7);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract9);
      assertNotSame(contract3, contract6);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract7);
      assertNotSame(contract3, contract8);
      assertNotSame(contract3, contract5);
      
      Contract contract10 = (Contract)contract6.clone();
      assertEquals(0, contract10.m_conId);
      assertFalse(contract10.m_includeExpired);
      assertEquals(0.0, contract10.m_strike, 0.01);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertNotNull(contract10);
      assertFalse(contract10.equals((Object)contract3));
      assertFalse(contract10.equals((Object)contract2));
      assertFalse(contract10.equals((Object)contract0));
      assertTrue(contract10.equals((Object)contract6));
      assertFalse(contract10.equals((Object)contract4));
      assertFalse(contract10.equals((Object)contract9));
      assertFalse(contract10.equals((Object)contract5));
      assertTrue(contract10.equals((Object)contract7));
      assertTrue(contract10.equals((Object)contract8));
      assertFalse(contract10.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract8));
      assertTrue(contract6.equals((Object)contract7));
      assertFalse(contract6.equals((Object)contract9));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertNotSame(contract10, contract3);
      assertNotSame(contract10, contract2);
      assertNotSame(contract10, contract0);
      assertNotSame(contract10, contract7);
      assertNotSame(contract10, contract8);
      assertNotSame(contract10, contract4);
      assertNotSame(contract10, contract9);
      assertNotSame(contract10, contract5);
      assertNotSame(contract10, contract6);
      assertNotSame(contract10, contract1);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract9);
      assertNotSame(contract6, contract10);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract8);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean2 = contract6.equals(integer1);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertTrue(contract6.equals((Object)contract10));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract8));
      assertTrue(contract6.equals((Object)contract7));
      assertFalse(contract6.equals((Object)contract9));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract0));
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract7);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract9);
      assertNotSame(contract6, contract10);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract8);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      boolean boolean0 = contract0.equals("H0H*#A$J{=P.GN/xP");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean0);
      
      contract0.m_right = "63Nt \"~_<zW(udM";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Contract contract1 = new Contract();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean1 = contract0.equals(contract1);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract(0, (String) null, (String) null, "iH@C4um=&Qq77?<M", 0, (String) null, (String) null, (String) null, "{.5thj}WCHeB", "O};g^", contract0.m_comboLegs, "O};g^", true, (String) null, (String) null);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      contract0.m_multiplier = "T`NzH-7hAGNwU*Kd8L";
      Contract contract1 = new Contract();
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract1.m_includeExpired = false;
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Contract contract3 = new Contract(174, (String) null, "BOND", (String) null, 1603.341, "BOND", (String) null, "[X$<u{7CuR_EPK.", "JsXTaX]B[yO^1@Y?%F ", "BOND", vector0, (String) null, false, (String) null, "/o xy`sic~R$*'S9:K");
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(174, contract3.m_conId);
      assertNotNull(contract3);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      contract3.m_strike = 1603.341;
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = contract1.equals(contract3);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(174, contract3.m_conId);
      assertFalse(boolean0);
      assertFalse(vector0.contains(174));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Contract contract4 = (Contract)contract3.clone();
      assertEquals(1603.341, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(174, contract3.m_conId);
      assertEquals(1603.341, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertEquals(174, contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(vector0.contains(174));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = contract0.equals(object0);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      contract0.m_exchange = "* ~";
      contract0.m_includeExpired = true;
      contract0.m_secId = "";
      contract0.m_comboLegsDescrip = "";
      contract0.m_comboLegsDescrip = "";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_secType = "JsXTaX]B[yO^1@Y?%F ";
      contract0.m_includeExpired = true;
      contract0.m_exchange = "0";
      contract0.m_exchange = "";
      contract0.m_expiry = "";
      boolean boolean0 = contract0.equals((Object) null);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertNotNull(contract3);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      
      boolean boolean1 = contract0.equals(contract2);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertTrue(boolean1);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract0);
      
      Contract contract4 = (Contract)contract0.clone();
      assertEquals(0, contract4.m_conId);
      assertTrue(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract4);
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      contract0.m_strike = (-1.0);
      Contract contract2 = (Contract)contract1.clone();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      boolean boolean0 = contract0.equals(contract2);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-1.0), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      boolean boolean1 = contract0.equals((Object) null);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-1.0), contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_secIdType = "=)y]|!]QIWkk[#x";
      Contract contract1 = new Contract();
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      contract1.m_strike = 1373.0;
      boolean boolean0 = contract1.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(1373.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_right = null;
      Contract contract1 = new Contract(0, "]v]'NpgOH>v)", (String) null, "{GY3W.", 0, (String) null, (String) null, (String) null, "com.ib.client.Contract", "com.ib.client.UnderComp", contract0.m_comboLegs, (String) null, false, (String) null, (String) null);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_exchange = null;
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      
      contract1.m_conId = 0;
      Contract contract4 = (Contract)contract1.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract2));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract2);
      
      boolean boolean1 = contract0.equals("com.ib.client.Contract");
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertNotNull(contract5);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract1));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      
      boolean boolean2 = contract1.equals(contract5);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract5));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract3);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      
      Contract contract6 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertNotNull(contract6);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract1));
      assertTrue(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract2));
      assertTrue(contract6.equals((Object)contract5));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = contract0.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean3);
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      
      Vector<String> vector0 = null;
      try {
        vector0 = new Vector<String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_symbol = "W|TX_";
      Contract contract1 = new Contract();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract1.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<Contract> vector0 = new Vector<Contract>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Contract contract0 = new Contract((-3133), "};g^", "};g^", ":4", (-3133), ":4", ":4", ":4", "};g^", ":4", vector0, "};g^", true, "o[nJe{^C*$-ZQxvxxAc", "};g^");
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertFalse(vector0.contains(contract0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract1.m_strike, 0.01);
      assertEquals((-3133), contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(vector0.contains(contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertFalse(vector0.contains(contract1));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract3.m_includeExpired);
      assertEquals((-3133.0), contract3.m_strike, 0.01);
      assertEquals((-3133), contract3.m_conId);
      assertNotNull(contract3);
      assertFalse(vector0.contains(contract1));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertNotNull(underComp0);
      
      boolean boolean0 = contract1.equals("o[nJe{^C*$-ZQxvxxAc");
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract1.m_strike, 0.01);
      assertEquals((-3133), contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(vector0.contains(contract1));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = vector0.add(contract2);
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertTrue(boolean1);
      assertFalse(vector0.contains(contract0));
      assertTrue(vector0.contains(contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Vector<Integer> vector1 = new Vector<Integer>();
      assertNotNull(vector1);
      assertFalse(vector1.contains((-3133)));
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      Contract contract4 = (Contract)contract1.clone();
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract1.m_strike, 0.01);
      assertEquals((-3133), contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-3133.0), contract4.m_strike, 0.01);
      assertTrue(contract4.m_includeExpired);
      assertEquals((-3133), contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(vector0.contains(contract0));
      assertTrue(vector0.contains(contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract4);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract2);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      boolean boolean2 = contract0.equals(contract2);
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract2.m_strike, 0.01);
      assertEquals((-3133), contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(vector0.contains(contract0));
      assertTrue(vector0.contains(contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract4));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Contract contract5 = (Contract)contract1.clone();
      assertEquals((-3133.0), contract0.m_strike, 0.01);
      assertEquals((-3133), contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals((-3133.0), contract1.m_strike, 0.01);
      assertEquals((-3133), contract1.m_conId);
      assertTrue(contract1.m_includeExpired);
      assertEquals((-3133), contract5.m_conId);
      assertEquals((-3133.0), contract5.m_strike, 0.01);
      assertTrue(contract5.m_includeExpired);
      assertNotNull(contract5);
      assertFalse(vector0.contains(contract0));
      assertTrue(vector0.contains(contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract4));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract3));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract5);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract4);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      contract0.m_comboLegs = vector0;
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, contract0.m_comboLegs.size());
      assertEquals("[]", contract0.m_comboLegs.toString());
      assertTrue(contract0.m_comboLegs.isEmpty());
      assertEquals(10, contract0.m_comboLegs.capacity());
      
      contract0.m_secId = "com.ib.client.UnderComp";
      contract0.m_exchange = "]vJp";
      boolean boolean0 = vector0.add((Vector<Object>) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      contract0.m_expiry = "com.ib.client.Contract";
      contract0.m_primaryExch = "Rz|WK7PWA >JMJ68veA";
      contract0.m_secType = "com.ib.client.Contract";
      contract0.m_secIdType = null;
      Contract contract1 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Contract contract3 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean1 = contract0.equals((Object) null);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      
      Contract contract4 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertNotNull(contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract0);
      
      boolean boolean2 = vector0.add((Vector<Object>) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract5);
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      
      boolean boolean3 = contract0.equals(contract4);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(boolean3);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract5));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      
      List<Vector<Object>> list0 = vector0.subList(0, 0);
      assertNotNull(list0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Contract contract6 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertNotNull(contract6);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract4));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract2));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract3);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract0);
      
      Contract contract7 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertFalse(contract7.m_includeExpired);
      assertEquals(0, contract7.m_conId);
      assertNotNull(contract7);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract1));
      assertFalse(contract7.equals((Object)contract2));
      assertFalse(contract7.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract4));
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract3);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract4);
      
      Contract contract8 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract8.m_conId);
      assertFalse(contract8.m_includeExpired);
      assertEquals(0.0, contract8.m_strike, 0.01);
      assertNotNull(contract8);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract8.equals((Object)contract2));
      assertFalse(contract8.equals((Object)contract1));
      assertFalse(contract8.equals((Object)contract4));
      assertFalse(contract8.equals((Object)contract3));
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract3);
      assertNotSame(contract8, contract6);
      assertNotSame(contract8, contract2);
      assertNotSame(contract8, contract1);
      assertNotSame(contract8, contract7);
      assertNotSame(contract8, contract0);
      assertNotSame(contract8, contract5);
      assertNotSame(contract8, contract4);
      assertNotSame(contract8, contract3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = contract0.equals(object0);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean4);
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = contract0.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_currency = "mWx*p\"/NK?Rw_nQUB,.";
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      boolean boolean1 = contract0.equals(object0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      
      Contract contract3 = new Contract();
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertNotNull(contract3);
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      
      Contract contract4 = (Contract)contract3.clone();
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertNotNull(contract4);
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertNotNull(contract5);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract1);
      
      boolean boolean2 = contract0.equals(contract4);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(boolean2);
      assertTrue(contract0.equals((Object)contract5));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract4));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract5));
      assertTrue(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract5));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract5);
      
      Contract contract6 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertEquals(0, contract6.m_conId);
      assertFalse(contract6.m_includeExpired);
      assertNotNull(contract6);
      assertTrue(contract0.equals((Object)contract5));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract0);
      
      Contract contract7 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract7.m_includeExpired);
      assertEquals(0, contract7.m_conId);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertNotNull(contract7);
      assertTrue(contract0.equals((Object)contract5));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract7.equals((Object)contract0));
      assertTrue(contract7.equals((Object)contract5));
      assertTrue(contract7.equals((Object)contract6));
      assertFalse(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract3));
      assertTrue(contract7.equals((Object)contract2));
      assertFalse(contract7.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract4);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_exchange = "i9$sEr7nx";
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      contract0.m_includeExpired = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      contract0.m_primaryExch = "BOND";
      boolean boolean0 = contract0.equals(object0);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(boolean0);
      
      contract0.m_exchange = "BOND";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      boolean boolean1 = contract0.equals(contract1);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertTrue(boolean1);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      
      boolean boolean2 = contract0.equals(contract2);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertTrue(boolean2);
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean3 = contract0.equals(object1);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(boolean3);
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(object1, object0);
      
      Contract contract4 = new Contract();
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract4);
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      
      boolean boolean4 = contract0.equals(contract4);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean4);
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      contract4.m_underComp = null;
      boolean boolean5 = contract4.equals(object2);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      
      Contract contract5 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertNotNull(contract5);
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract1));
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract0);
      
      Contract contract6 = (Contract)contract4.clone();
      assertEquals(0, contract6.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract6);
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract5));
      assertFalse(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract6);
      
      Contract contract7 = (Contract)contract4.clone();
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertFalse(contract7.m_includeExpired);
      assertEquals(0, contract7.m_conId);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract7);
      assertFalse(contract7.equals((Object)contract3));
      assertTrue(contract7.equals((Object)contract6));
      assertFalse(contract7.equals((Object)contract1));
      assertTrue(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract2));
      assertFalse(contract7.equals((Object)contract5));
      assertFalse(contract7.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract6));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract4);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract7);
      
      boolean boolean6 = contract4.equals(contract7);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertFalse(contract7.m_includeExpired);
      assertEquals(0, contract7.m_conId);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertTrue(boolean6);
      assertFalse(contract7.equals((Object)contract3));
      assertTrue(contract7.equals((Object)contract6));
      assertFalse(contract7.equals((Object)contract1));
      assertTrue(contract7.equals((Object)contract4));
      assertFalse(contract7.equals((Object)contract2));
      assertFalse(contract7.equals((Object)contract5));
      assertFalse(contract7.equals((Object)contract0));
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract6));
      assertTrue(contract4.equals((Object)contract7));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract0));
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract0);
      assertNotSame(contract7, contract4);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      contract0.m_multiplier = "";
      contract0.m_right = "<@Nr>RyhJ3";
      contract0.m_secId = "";
      contract0.m_secIdType = "";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = contract0.equals(object0);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean0);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      
      Contract contract3 = new Contract(0, "", "com.ib.client.UnderComp", "BOND", 1.0, "``NG(eM8ZQipa/I6a?1", " gxluUF_l#A2~n,", "<@Nr>RyhJ3", "87CKG#>Dq#dN/r26k9", "", contract0.m_comboLegs, "", true, "x6:;C7|3h{Rdl", "");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(1.0, contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract0));
      
      boolean boolean1 = contract0.equals(contract3);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(1.0, contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertFalse(boolean1);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean2 = contract0.equals(contract2);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertTrue(boolean2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract2.equals((Object)contract3));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      contract3.m_localSymbol = "<@Nr>RyhJ3";
      contract0.m_primaryExch = null;
      boolean boolean3 = contract0.equals(contract1);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertTrue(boolean3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      
      boolean boolean4 = contract3.equals("com.ib.client.UnderComp");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(1.0, contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertFalse(boolean4);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean5 = contract0.equals(object0);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract3));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = vector0.add((Object) "\"{yk8E5|RE$");
      assertTrue(boolean0);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.isEmpty());
      assertEquals("[\"{yk8E5|RE$]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      boolean boolean1 = vector0.add((Object) "[*.W$kK");
      assertTrue(boolean1);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertTrue(boolean1 == boolean0);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract0 = new Contract(0, "", "[*.W$kK", "", 0.0, "", "\"{yk8E5|RE$", "[*.W$kK", "", "\"{yk8E5|RE$", vector0, "com.ib.client.UnderComp", true, "[*.W$kK", "[?&B6Dq");
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(0.0));
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      contract0.m_secId = "`TWC8%t-^'|c";
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      contract0.m_multiplier = "`TWC8%t-^'|c";
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertTrue(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      boolean boolean2 = contract0.equals("[*.W$kK");
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(contract0, contract1);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      contract0.m_secType = "F>j>HAJ6";
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertTrue(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertTrue(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract2));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract0);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract4 = new Contract();
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract4);
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      
      boolean boolean3 = contract0.equals(contract4);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean3);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Spliterator<Object> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract5 = (Contract)contract4.clone();
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract3));
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract3);
      
      contract4.m_secType = "";
      Contract contract6 = (Contract)contract4.clone();
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertEquals(0, contract6.m_conId);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract6);
      assertTrue(contract6.equals((Object)contract5));
      assertFalse(contract6.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract1));
      assertFalse(contract6.equals((Object)contract0));
      assertFalse(contract6.equals((Object)contract3));
      assertTrue(contract6.equals((Object)contract4));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract2);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      
      Contract contract7 = (Contract)contract0.clone();
      assertEquals(0, contract7.m_conId);
      assertEquals(0.0, contract7.m_strike, 0.01);
      assertTrue(contract7.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract7);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertFalse(contract7.equals((Object)contract6));
      assertTrue(contract7.equals((Object)contract0));
      assertFalse(contract7.equals((Object)contract5));
      assertFalse(contract7.equals((Object)contract1));
      assertTrue(contract7.equals((Object)contract2));
      assertTrue(contract7.equals((Object)contract3));
      assertFalse(contract7.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract5));
      assertNotSame(contract7, contract6);
      assertNotSame(contract7, contract2);
      assertNotSame(contract7, contract3);
      assertNotSame(contract7, contract5);
      assertNotSame(contract7, contract1);
      assertNotSame(contract7, contract4);
      assertNotSame(contract7, contract0);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      Contract contract8 = (Contract)contract4.clone();
      assertFalse(contract8.m_includeExpired);
      assertEquals(0, contract8.m_conId);
      assertEquals(0.0, contract8.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract8);
      assertFalse(contract8.equals((Object)contract1));
      assertTrue(contract8.equals((Object)contract4));
      assertFalse(contract8.equals((Object)contract0));
      assertFalse(contract8.equals((Object)contract7));
      assertTrue(contract8.equals((Object)contract5));
      assertTrue(contract8.equals((Object)contract6));
      assertFalse(contract8.equals((Object)contract3));
      assertFalse(contract8.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract6));
      assertFalse(contract4.equals((Object)contract7));
      assertFalse(contract4.equals((Object)contract1));
      assertNotSame(contract8, contract1);
      assertNotSame(contract8, contract5);
      assertNotSame(contract8, contract6);
      assertNotSame(contract8, contract0);
      assertNotSame(contract8, contract7);
      assertNotSame(contract8, contract4);
      assertNotSame(contract8, contract3);
      assertNotSame(contract8, contract2);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract8);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract7);
      assertNotSame(contract4, contract1);
      
      Contract contract9 = (Contract)contract0.clone();
      assertEquals(0, contract9.m_conId);
      assertEquals(0.0, contract9.m_strike, 0.01);
      assertTrue(contract9.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract9);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertFalse(contract9.equals((Object)contract6));
      assertTrue(contract9.equals((Object)contract0));
      assertFalse(contract9.equals((Object)contract5));
      assertFalse(contract9.equals((Object)contract8));
      assertTrue(contract9.equals((Object)contract7));
      assertTrue(contract9.equals((Object)contract2));
      assertFalse(contract9.equals((Object)contract4));
      assertFalse(contract9.equals((Object)contract1));
      assertTrue(contract9.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract7));
      assertFalse(contract0.equals((Object)contract8));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract5));
      assertNotSame(contract9, contract3);
      assertNotSame(contract9, contract7);
      assertNotSame(contract9, contract6);
      assertNotSame(contract9, contract5);
      assertNotSame(contract9, contract8);
      assertNotSame(contract9, contract0);
      assertNotSame(contract9, contract2);
      assertNotSame(contract9, contract4);
      assertNotSame(contract9, contract1);
      assertNotSame(contract0, contract9);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      boolean boolean4 = contract4.equals("com.ib.client.UnderComp");
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(contract4.equals((Object)contract8));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract9));
      assertFalse(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract6));
      assertFalse(contract4.equals((Object)contract7));
      assertFalse(contract4.equals((Object)contract1));
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract8);
      assertNotSame(contract4, contract9);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract7);
      assertNotSame(contract4, contract1);
      
      Contract contract10 = (Contract)contract4.clone();
      assertEquals(0, contract10.m_conId);
      assertFalse(contract10.m_includeExpired);
      assertEquals(0.0, contract10.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract10);
      assertFalse(contract10.equals((Object)contract7));
      assertFalse(contract10.equals((Object)contract3));
      assertFalse(contract10.equals((Object)contract9));
      assertFalse(contract10.equals((Object)contract1));
      assertTrue(contract10.equals((Object)contract5));
      assertTrue(contract10.equals((Object)contract8));
      assertTrue(contract10.equals((Object)contract4));
      assertFalse(contract10.equals((Object)contract0));
      assertTrue(contract10.equals((Object)contract6));
      assertFalse(contract10.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract8));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract9));
      assertFalse(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract6));
      assertFalse(contract4.equals((Object)contract7));
      assertFalse(contract4.equals((Object)contract1));
      assertNotSame(contract10, contract7);
      assertNotSame(contract10, contract3);
      assertNotSame(contract10, contract6);
      assertNotSame(contract10, contract9);
      assertNotSame(contract10, contract1);
      assertNotSame(contract10, contract4);
      assertNotSame(contract10, contract0);
      assertNotSame(contract10, contract5);
      assertNotSame(contract10, contract8);
      assertNotSame(contract10, contract2);
      assertNotSame(contract4, contract10);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract8);
      assertNotSame(contract4, contract9);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract7);
      assertNotSame(contract4, contract1);
      
      boolean boolean5 = contract0.equals(contract10);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(contract0.m_includeExpired);
      assertEquals(0, contract10.m_conId);
      assertFalse(contract10.m_includeExpired);
      assertEquals(0.0, contract10.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean5);
      assertTrue(vector0.contains("\"{yk8E5|RE$"));
      assertFalse(vector0.contains(""));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract0.equals((Object)contract7));
      assertFalse(contract0.equals((Object)contract8));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract9));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract6));
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract10));
      assertFalse(contract0.equals((Object)contract5));
      assertFalse(contract10.equals((Object)contract7));
      assertFalse(contract10.equals((Object)contract3));
      assertFalse(contract10.equals((Object)contract9));
      assertFalse(contract10.equals((Object)contract1));
      assertTrue(contract10.equals((Object)contract5));
      assertTrue(contract10.equals((Object)contract8));
      assertTrue(contract10.equals((Object)contract4));
      assertFalse(contract10.equals((Object)contract0));
      assertTrue(contract10.equals((Object)contract6));
      assertFalse(contract10.equals((Object)contract2));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(contract4.equals((Object)contract8));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract9));
      assertFalse(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract10));
      assertTrue(contract4.equals((Object)contract6));
      assertFalse(contract4.equals((Object)contract7));
      assertFalse(contract4.equals((Object)contract1));
      assertNotSame(contract0, contract9);
      assertNotSame(contract0, contract8);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract10);
      assertNotSame(contract0, contract7);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract3);
      assertNotSame(contract10, contract7);
      assertNotSame(contract10, contract3);
      assertNotSame(contract10, contract6);
      assertNotSame(contract10, contract9);
      assertNotSame(contract10, contract1);
      assertNotSame(contract10, contract4);
      assertNotSame(contract10, contract0);
      assertNotSame(contract10, contract5);
      assertNotSame(contract10, contract8);
      assertNotSame(contract10, contract2);
      assertNotSame(contract4, contract10);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract6);
      assertNotSame(contract4, contract8);
      assertNotSame(contract4, contract9);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract7);
      assertNotSame(contract4, contract1);
      assertEquals("[\"{yk8E5|RE$, [*.W$kK]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract1.m_currency = "}1tW\"wma?4";
      contract1.m_secType = "BOND";
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Contract contract0 = new Contract(0, (String) null, "a0o=M&\"p'y%", "", 0, "BOND", "h4@5", "/N-#]B6$HW{?M", "", "ep9a", (Vector) null, ">#}bi=`{{3", true, "", "'fq=cE*K<");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = contract0.equals(object0);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertTrue(contract0.m_includeExpired);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "BOND");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_exchange = "Z";
      Predicate<Vector<Object>> predicate3 = Predicate.isEqual((Object) contract0);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.negate();
      assertNotNull(predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate4, predicate1);
      
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      assertNotNull(predicate5);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotSame(predicate1, predicate4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("BOND"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = vector0.removeIf(predicate5);
      assertFalse(boolean1);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("BOND"));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(predicate1, predicate4);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Contract contract1 = new Contract(611, "Z", "Z", "Z", 611, "com.ib.client.UnderComp", (String) null, "kr-4&|1u#[Ol0=D+Ig", "BOND", "BOND", vector0, "BOND", false, "", "BOND");
      assertFalse(contract1.m_includeExpired);
      assertEquals(611.0, contract1.m_strike, 0.01);
      assertEquals(611, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("Z"));
      assertFalse(contract1.equals((Object)contract0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      contract1.m_comboLegsDescrip = "B[g`";
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Contract contract2 = new Contract(0, "Z", "", (String) null, (-1043.470823), "]XHMI`gnJ#h", "^+U2f(hf 0.>Pi32qV*", "BOND", "BOND", "", vector0, "6v;,9IZ", false, "Z", "Z");
      assertEquals(0, contract2.m_conId);
      assertEquals((-1043.470823), contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("Z"));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      contract2.m_includeExpired = false;
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean2 = contract1.equals(contract2);
      assertFalse(contract1.m_includeExpired);
      assertEquals(611.0, contract1.m_strike, 0.01);
      assertEquals(611, contract1.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals((-1043.470823), contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertFalse(boolean2);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("Z"));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Contract contract3 = (Contract)contract2.clone();
      assertEquals((-1043.470823), contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0, contract2.m_conId);
      assertEquals((-1043.470823), contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("Z"));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract0);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract3);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract1.m_conId = 1373;
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(1373, contract1.m_conId);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Contract contract0 = new Contract((-1241), "com.ib.client.Util", "3&o.zbDM_Pf)la&TG", "3&o.zbDM_Pf)la&TG", (-1241), (String) null, "3&o.zbDM_Pf)la&TG", "com.ib.client.Util", "3&o.zbDM_Pf)la&TG", "com.ib.client.Util", (Vector) null, "com.ib.client.Util", false, "o694PP~f", "com.ib.client.Util");
      assertEquals((-1241), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-1241.0), contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      // Undeclared exception!
      try { 
        contract0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Contract", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Contract contract0 = new Contract(2899, "", "com.ib.client.Contract", "m$03v}xKDy-rN?1eP", 2899, "wll+s", "m$03v}xKDy-rN?1eP", "m$03v}xKDy-rN?1eP", "com.ib.client.Contract", "", (Vector) null, "wll+s", false, "com.ib.client.Contract", "tH");
      assertEquals(2899, contract0.m_conId);
      assertEquals(2899.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      contract0.m_currency = "tH";
      contract0.m_includeExpired = false;
      boolean boolean0 = contract0.equals((Object) null);
      assertEquals(2899, contract0.m_conId);
      assertEquals(2899.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean0);
      
      boolean boolean1 = contract0.equals("");
      assertEquals(2899, contract0.m_conId);
      assertEquals(2899.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      contract0.m_primaryExch = "com.ib.client.Contract";
      contract0.m_exchange = "";
      contract0.m_currency = "com.ib.client.Contract";
      contract0.m_localSymbol = "";
      contract0.m_right = "com.ib.client.Contract";
      boolean boolean2 = contract0.equals(object0);
      assertEquals(2899, contract0.m_conId);
      assertEquals(2899.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        contract0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Contract", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_symbol = "H0H*#A$J{=P.GN/xP";
      contract0.m_strike = (-1562.530190536);
      contract0.m_includeExpired = false;
      boolean boolean0 = contract0.equals("4kmT");
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertFalse(boolean0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals((-1562.530190536), contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals((-1562.530190536), contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      boolean boolean1 = contract0.equals(contract2);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals((-1562.530190536), contract2.m_strike, 0.01);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertTrue(boolean1);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertEquals((-1562.530190536), contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      
      Contract contract4 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals((-1562.530190536), contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract2));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      
      boolean boolean2 = contract0.equals("H0H*#A$J{=P.GN/xP");
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertFalse(boolean2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      
      Contract contract5 = (Contract)contract0.clone();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals((-1562.530190536), contract0.m_strike, 0.01);
      assertEquals((-1562.530190536), contract5.m_strike, 0.01);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertNotNull(contract5);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract1));
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector<Contract> vector0 = new Vector<Contract>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Vector<Object> vector1 = new Vector<Object>(vector0);
      assertNotNull(vector1);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      
      boolean boolean0 = vector1.add((Object) null);
      assertTrue(boolean0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[null]", vector1.toString());
      
      boolean boolean1 = vector0.add((Contract) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Contract contract0 = new Contract(0, (String) null, (String) null, (String) null, 463.4440359839312, (String) null, (String) null, (String) null, (String) null, (String) null, vector1, "", false, "", "");
      assertEquals(463.4440359839312, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      assertFalse(vector0.contains(contract0));
      assertFalse(vector1.contains(""));
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[null]", vector1.toString());
      
      boolean boolean2 = contract0.equals(vector0);
      assertEquals(463.4440359839312, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(vector0.contains(contract0));
      assertFalse(vector1.contains(""));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[null]", vector1.toString());
      
      boolean boolean3 = contract0.equals("");
      assertEquals(463.4440359839312, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean3);
      assertFalse(vector0.contains(contract0));
      assertFalse(vector1.contains(""));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[null]", vector1.toString());
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(463.4440359839312, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(463.4440359839312, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertFalse(vector0.contains(contract0));
      assertFalse(vector1.contains(""));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertEquals(1, vector1.capacity());
      assertFalse(vector1.isEmpty());
      assertEquals("[null]", vector1.toString());
      
      // Undeclared exception!
      try { 
        contract0.equals(contract1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract1.m_localSymbol = null;
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      contract2.m_multiplier = "com.ib.client.Contract";
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract1);
      
      Contract contract4 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract0);
      
      boolean boolean0 = contract0.equals(contract2);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(boolean0);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract4));
      assertFalse(contract2.equals((Object)contract3));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract4);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract3);
      
      Contract contract5 = (Contract)contract3.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertNotNull(contract5);
      assertTrue(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract4));
      assertTrue(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract2));
      assertTrue(contract5.equals((Object)contract3));
      assertTrue(contract5.equals((Object)contract4));
      assertTrue(contract5.equals((Object)contract0));
      assertTrue(contract5.equals((Object)contract1));
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Contract contract1 = new Contract();
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      contract1.m_localSymbol = "i=/K2&gnIQ.KJM";
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      contract0.m_underComp = underComp0;
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Contract contract3 = (Contract)contract2.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertNotNull(contract3);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract2.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertFalse(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean1 = contract1.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean1);
      assertFalse(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Contract contract1 = new Contract();
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertTrue(boolean0);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      contract0.m_secId = null;
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract0);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean1 = contract1.equals(object0);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean1);
      assertTrue(contract1.equals((Object)contract0));
      assertTrue(contract1.equals((Object)contract3));
      assertTrue(contract1.equals((Object)contract2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract1, contract0);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract3);
      
      Contract contract4 = new Contract();
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertNotNull(contract4);
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract0));
      assertTrue(contract4.equals((Object)contract3));
      
      contract4.m_primaryExch = "tgPpQOLxGQ}KAzH";
      Contract contract5 = (Contract)contract4.clone();
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertEquals(0, contract5.m_conId);
      assertNotNull(contract5);
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract1));
      assertTrue(contract5.equals((Object)contract4));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract3));
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract4);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract3);
      
      boolean boolean2 = contract2.equals(contract4);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0, contract2.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertFalse(boolean2);
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract4));
      assertFalse(contract2.equals((Object)contract5));
      assertTrue(contract2.equals((Object)contract3));
      assertTrue(contract2.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract3));
      assertFalse(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract5));
      assertFalse(contract4.equals((Object)contract2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract3);
      assertNotSame(contract2, contract4);
      assertNotSame(contract2, contract1);
      assertNotSame(contract2, contract5);
      assertNotSame(contract2, contract3);
      assertNotSame(contract2, contract0);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract5);
      assertNotSame(contract4, contract2);
      
      Contract contract6 = (Contract)contract3.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract6.m_conId);
      assertEquals(0.0, contract6.m_strike, 0.01);
      assertFalse(contract6.m_includeExpired);
      assertNotNull(contract6);
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract5));
      assertFalse(contract3.equals((Object)contract4));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract6.equals((Object)contract4));
      assertTrue(contract6.equals((Object)contract3));
      assertFalse(contract6.equals((Object)contract5));
      assertTrue(contract6.equals((Object)contract0));
      assertTrue(contract6.equals((Object)contract2));
      assertTrue(contract6.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract6);
      assertNotSame(contract0, contract3);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract5);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract6);
      assertNotSame(contract6, contract4);
      assertNotSame(contract6, contract5);
      assertNotSame(contract6, contract1);
      assertNotSame(contract6, contract3);
      assertNotSame(contract6, contract0);
      assertNotSame(contract6, contract2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertTrue(boolean0);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertNotNull(contract2);
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertTrue(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertNotNull(contract3);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      
      boolean boolean0 = contract0.equals(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertTrue(boolean0);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      
      Contract contract4 = (Contract)contract3.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertEquals(0, contract3.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertEquals(0, contract4.m_conId);
      assertNotNull(contract4);
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(contract3.equals((Object)contract0));
      assertTrue(contract3.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract2));
      assertTrue(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertTrue(contract4.equals((Object)contract0));
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract4);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      assertNotSame(contract4, contract3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      contract0.m_secIdType = "com.ib.client.UnderComp";
      Contract contract1 = (Contract)contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertNotNull(contract1);
      assertTrue(contract1.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract1, contract0);
      
      Contract contract2 = new Contract();
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      
      boolean boolean0 = contract0.equals(contract2);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertFalse(boolean0);
      assertFalse(contract0.equals((Object)contract2));
      assertTrue(contract0.equals((Object)contract1));
      assertFalse(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Contract contract0 = new Contract((-437), "", "", "", (-437), "", "Dfo<zv,Ytm}~K", "", "", "Dfo<zv,Ytm}~K", vector0, "Dfo<zv,Ytm}~K", false, "", "");
      assertEquals((-437), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-437.0), contract0.m_strike, 0.01);
      assertNotNull(contract0);
      assertFalse(vector0.contains("Dfo<zv,Ytm}~K"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = contract0.equals(vector0);
      assertEquals((-437), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals((-437.0), contract0.m_strike, 0.01);
      assertFalse(boolean0);
      assertFalse(vector0.contains("Dfo<zv,Ytm}~K"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      boolean boolean0 = contract0.equals((Object) null);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Contract contract0 = new Contract(0, "", "", "", 0.0, "", (String) null, "", (String) null, "ojn", (Vector) null, "", false, (String) null, "ojn");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      contract0.m_expiry = null;
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      contract0.m_comboLegs = vector0;
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", contract0.m_comboLegs.toString());
      assertTrue(contract0.m_comboLegs.isEmpty());
      assertEquals(0, contract0.m_comboLegs.size());
      assertEquals(10, contract0.m_comboLegs.capacity());
      
      Contract contract1 = new Contract();
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertNotNull(contract1);
      assertFalse(contract1.equals((Object)contract0));
      
      contract1.m_currency = "SZ1";
      boolean boolean0 = vector0.add((Object) contract1);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertTrue(boolean0);
      assertFalse(vector0.contains(""));
      assertFalse(contract1.equals((Object)contract0));
      assertNotSame(contract1, contract0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      contract0.m_comboLegs = contract1.m_comboLegs;
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[]", contract0.m_comboLegs.toString());
      assertTrue(contract0.m_comboLegs.isEmpty());
      assertEquals(0, contract0.m_comboLegs.size());
      assertEquals(10, contract0.m_comboLegs.capacity());
      
      Contract contract2 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract2.m_includeExpired);
      assertEquals(0.0, contract2.m_strike, 0.01);
      assertEquals(0, contract2.m_conId);
      assertNotNull(contract2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract2.equals((Object)contract0));
      assertFalse(contract2.equals((Object)contract1));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract2);
      assertNotSame(contract2, contract0);
      assertNotSame(contract2, contract1);
      
      Contract contract3 = (Contract)contract0.clone();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(contract3.m_includeExpired);
      assertEquals(0, contract3.m_conId);
      assertEquals(0.0, contract3.m_strike, 0.01);
      assertNotNull(contract3);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertTrue(contract3.equals((Object)contract2));
      assertFalse(contract3.equals((Object)contract1));
      assertTrue(contract3.equals((Object)contract0));
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract2);
      assertNotSame(contract3, contract0);
      assertNotSame(contract3, contract1);
      assertNotSame(contract3, contract2);
      
      boolean boolean1 = contract1.equals((Object) null);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean1);
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract0);
      
      Contract contract4 = (Contract)contract1.clone();
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertEquals(0, contract1.m_conId);
      assertFalse(contract4.m_includeExpired);
      assertEquals(0, contract4.m_conId);
      assertEquals(0.0, contract4.m_strike, 0.01);
      assertNotNull(contract4);
      assertFalse(contract1.equals((Object)contract3));
      assertFalse(contract1.equals((Object)contract2));
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract4.equals((Object)contract2));
      assertFalse(contract4.equals((Object)contract3));
      assertTrue(contract4.equals((Object)contract1));
      assertFalse(contract4.equals((Object)contract0));
      assertNotSame(contract1, contract3);
      assertNotSame(contract1, contract2);
      assertNotSame(contract1, contract4);
      assertNotSame(contract1, contract0);
      assertNotSame(contract4, contract2);
      assertNotSame(contract4, contract3);
      assertNotSame(contract4, contract1);
      assertNotSame(contract4, contract0);
      
      boolean boolean2 = contract0.equals("ojn");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean2);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertTrue(contract0.equals((Object)contract3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      
      Contract contract5 = new Contract();
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertNotNull(contract5);
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract4));
      
      boolean boolean3 = contract0.equals(contract5);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract5.m_conId);
      assertFalse(contract5.m_includeExpired);
      assertEquals(0.0, contract5.m_strike, 0.01);
      assertFalse(boolean3);
      assertFalse(contract0.equals((Object)contract1));
      assertTrue(contract0.equals((Object)contract2));
      assertFalse(contract0.equals((Object)contract4));
      assertFalse(contract0.equals((Object)contract5));
      assertTrue(contract0.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract2));
      assertFalse(contract5.equals((Object)contract3));
      assertFalse(contract5.equals((Object)contract1));
      assertFalse(contract5.equals((Object)contract0));
      assertFalse(contract5.equals((Object)contract4));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(contract0, contract1);
      assertNotSame(contract0, contract3);
      assertNotSame(contract0, contract4);
      assertNotSame(contract0, contract2);
      assertNotSame(contract0, contract5);
      assertNotSame(contract5, contract2);
      assertNotSame(contract5, contract3);
      assertNotSame(contract5, contract1);
      assertNotSame(contract5, contract0);
      assertNotSame(contract5, contract4);
  }
}
